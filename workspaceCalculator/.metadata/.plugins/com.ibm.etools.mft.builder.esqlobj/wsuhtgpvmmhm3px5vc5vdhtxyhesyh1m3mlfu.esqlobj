/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		DECLARE origem REFERENCE TO InputRoot.XMLNSC.ns:SomarRequest;

		CASE origem.ns:Calcular.ns1:operacao
		WHEN '1' THEN
			CALL Dividir();
			PROPAGATE TO TERMINAL 'out1';
		WHEN '2' THEN
			CALL Subtrair();
			PROPAGATE TO TERMINAL 'out2';
		WHEN '3' THEN
			CALL Multiplicar();
			PROPAGATE TO TERMINAL 'out3';
		WHEN '4' THEN
			CALL Somar();
			PROPAGATE TO TERMINAL 'out';
		END CASE;


		RETURN FALSE;
	END;

	CREATE PROCEDURE Somar() BEGIN
		SET OutputRoot.XMLNSC = NULL;
		DECLARE origem REFERENCE TO InputRoot.XMLNSC.ns:SomarRequest.ns:Calcular;
		set OutputRoot.XMLNSC.ns6:Add.ns6:intA = origem.ns1:intA;
		set OutputRoot.XMLNSC.ns6:Add.ns6:intB = origem.ns1:intB;
	END;

	CREATE PROCEDURE Multiplicar() BEGIN
		SET OutputRoot.XMLNSC = NULL;
		DECLARE origem REFERENCE TO InputRoot.XMLNSC.ns:SomarRequest.ns:Calcular;
		set OutputRoot.XMLNSC.ns6:Multiply.ns6:intA = origem.ns1:intA;
		set OutputRoot.XMLNSC.ns6:Multiply.ns6:intB = origem.ns1:intB;
	END;

	CREATE PROCEDURE Dividir() BEGIN
		SET OutputRoot.XMLNSC = NULL;
		DECLARE origem REFERENCE TO InputRoot.XMLNSC.ns:SomarRequest.ns:Calcular;
		set OutputRoot.XMLNSC.ns6:Divide.ns6:intA = origem.ns1:intA;
		set OutputRoot.XMLNSC.ns6:Divide.ns6:intB = origem.ns1:intB;
	END;

	CREATE PROCEDURE Subtrair() BEGIN
		SET OutputRoot.XMLNSC = NULL;
		DECLARE origem REFERENCE TO InputRoot.XMLNSC.ns:SomarRequest.ns:Calcular;
		set OutputRoot.XMLNSC.ns6:Subtract.ns6:intA = origem.ns1:intA;
		set OutputRoot.XMLNSC.ns6:Subtract.ns6:intB = origem.ns1:intB;
	END;



	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
